{
  "stats": {
    "suites": 1,
    "tests": 4,
    "passes": 4,
    "pending": 0,
    "failures": 0,
    "start": "2023-11-02T09:06:17.016Z",
    "end": "2023-11-02T09:06:20.974Z",
    "duration": 3958,
    "testsRegistered": 4,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "5d7a17ce-02af-4110-b62a-91580b2b0fe4",
      "title": "",
      "fullFile": "D:\\book-ticket\\Book-A-Movie-Ticket-Fullstack-Boilerplate-main\\src\\backend\\__tests__\\api.test.js",
      "file": "\\__tests__\\api.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a9b7ec03-eca3-47e9-90f1-0fbd89458343",
          "title": "Movie Ticket Booking API",
          "fullFile": "D:\\book-ticket\\Book-A-Movie-Ticket-Fullstack-Boilerplate-main\\src\\backend\\__tests__\\api.test.js",
          "file": "\\__tests__\\api.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should successfully book a ticket",
              "fullTitle": "Movie Ticket Booking API should successfully book a ticket",
              "timedOut": false,
              "duration": 2956,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post('/api/booking')\n  .send({ movie: 'Sample Movie', seats: { A1: 2 }, slot: 'Morning' })\n  .end((err, res) => {\n    expect(res).to.have.status(200);\n    expect(res.body).to.be.an('object');\n    expect(res.body.movie[0]).to.equal( 'Sample Movie' );\n    expect(res.body.slot[0]).to.equal('Morning');\n    expect(res.body.seats.A1[0]).to.equal(2)\n    \n    done();\n  });",
              "err": {},
              "uuid": "29724704-fcea-4b48-9170-b5207c01cc8c",
              "parentUUID": "a9b7ec03-eca3-47e9-90f1-0fbd89458343",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle invalid input",
              "fullTitle": "Movie Ticket Booking API should handle invalid input",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post('/api/booking')\n  .send({ movie: \"\", seats: { A1: 2 }, slot: 'Evening' }) // movie and slot should not be empty and  atleast select one seat\n  .end((err, res) => {\n    expect(res).to.have.status(400);\n    done();\n  });",
              "err": {},
              "uuid": "6ffaafe5-81d5-450e-a9ae-e4b848bcf37a",
              "parentUUID": "a9b7ec03-eca3-47e9-90f1-0fbd89458343",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle seat availability conflict",
              "fullTitle": "Movie Ticket Booking API should handle seat availability conflict",
              "timedOut": false,
              "duration": 740,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post('/api/booking')\n  .send({ movie: 'Sample Movie', seats: { A1: 1 }, slot: 'Morning' })\n  .end(() => {\n    chai\n      .request(app)\n      .post('/api/booking')\n      .send({ movie: 'Sample Movie', seats: { A1: 1 }, slot: 'Morning' })\n      .end((err, res) => {\n        expect(res).to.have.status(409);\n        done();\n      });\n  });",
              "err": {},
              "uuid": "877e2131-2e7b-4129-b0b6-799421e6accd",
              "parentUUID": "a9b7ec03-eca3-47e9-90f1-0fbd89458343",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve the last booking",
              "fullTitle": "Movie Ticket Booking API should retrieve the last booking",
              "timedOut": false,
              "duration": 243,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .get('/api/booking')\n  .end((err, res) => {\n    expect(res).to.have.status(200);\n    expect(res.body).to.be.an('object');\n  \n    // Add assertions for the retrieved booking data\n    const bookingData = res.body;\n    \n    // bookingData={ movie:['movie_name'],seats:{}, slot:['slot_name']}\n    // Ensure that the retrieved booking data contains the expected properties\n    expect(bookingData).to.have.property('movie');\n    expect(bookingData).to.have.property('seats');\n    expect(bookingData).to.have.property('slot');\n  \n    // Add more specific assertions based on your data structure\n    // For example, if you expect 'movie' to be a string:\n    expect(bookingData.movie).to.be.a('array'); \n    expect(bookingData.movie[0]).to.be.a('string');\n  \n    // If you expect 'seats' to be an object:\n    expect(bookingData.seats).to.be.an('object');\n  \n    // If you expect 'slot' to be a string:\n    expect(bookingData.slot).to.be.a('array');\n    expect(bookingData.slot[0]).to.be.a('string');\n  \n    //check specific values if we have predefined data\n    // For example, if we know the expected movie name, slot, or seats:\n    // expect(bookingData.movie).to.equal('Expected Movie Name');\n    // expect(bookingData.slot).to.equal('Expected Slot');\n    // expect(bookingData.seats).to.deep.equal({ A1: 2, A2: 0 });\n  \n    done();\n  });",
              "err": {},
              "uuid": "04c8fa2e-e831-443d-9e9e-5b472b716d8e",
              "parentUUID": "a9b7ec03-eca3-47e9-90f1-0fbd89458343",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "29724704-fcea-4b48-9170-b5207c01cc8c",
            "6ffaafe5-81d5-450e-a9ae-e4b848bcf37a",
            "877e2131-2e7b-4129-b0b6-799421e6accd",
            "04c8fa2e-e831-443d-9e9e-5b472b716d8e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3944,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 60000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}